// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/status.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	object "yatter-backend-go/app/domain/object"
	usecase "yatter-backend-go/app/usecase"

	gomock "github.com/golang/mock/gomock"
)

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStatus) Create(ctx context.Context, account_id int, content string) (*usecase.CreateStatusDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account_id, content)
	ret0, _ := ret[0].(*usecase.CreateStatusDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStatusMockRecorder) Create(ctx, account_id, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStatus)(nil).Create), ctx, account_id, content)
}

// FindByID mocks base method.
func (m *MockStatus) FindByID(ctx context.Context, id string) (*usecase.GetStatusDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*usecase.GetStatusDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockStatusMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockStatus)(nil).FindByID), ctx, id)
}

// FindPublicTimeline mocks base method.
func (m *MockStatus) FindPublicTimeline(ctx context.Context, limit int) ([]*object.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPublicTimeline", ctx, limit)
	ret0, _ := ret[0].([]*object.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPublicTimeline indicates an expected call of FindPublicTimeline.
func (mr *MockStatusMockRecorder) FindPublicTimeline(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPublicTimeline", reflect.TypeOf((*MockStatus)(nil).FindPublicTimeline), ctx, limit)
}
